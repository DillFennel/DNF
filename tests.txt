/*
    //Тест работы с ДНФ
    make_dnf();
    Tree t;
    make_tree_from_dnf(&t);
    bitset <16> x(t.get_key());
    cout<<"Получившаяся ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<x<<endl<<"Значение в вершине до оптимизации: "<<t.get_value()<<endl;
    t.optimize();
    cout<<"Оптимизированный ДНФ: "<<t.print()<<endl<<"Значение в вершине после оптимизации: "<<t.get_value()<<endl;
    
    //Тест работы с ДНФ - Два отрицания
    Tree t('!', new Tree('!', new Tree('a')));
    bitset <16> x(t.get_key());
    cout<<"Получившаяся ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<x<<endl<<"Значение в вершине до оптимизации: "<<t.get_value()<<endl;
    t.optimize();
    bitset <16> y(t.get_key());
    cout<<"Оптимизированный ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<y<<endl<<"Значение в вершине после оптимизации: "<<t.get_value()<<endl;
    
    //Тест работы с ДНФ - Три отрицания
    Tree t('!', new Tree('!', new Tree('!', new Tree('a'))));
    bitset <16> x(t.get_key());
    cout<<"Получившаяся ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<x<<endl<<"Значение в вершине до оптимизации: "<<t.get_value()<<endl;
    t.optimize();
    bitset <16> y(t.get_key());
    cout<<"Оптимизированный ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<y<<endl<<"Значение в вершине после оптимизации: "<<t.get_value()<<endl;
    return 0;
    */

    //Тест работы с ДНФ - Тест с тройной инверсией 2
    Tree t('!', new Tree('!', new Tree('!', new Tree('+', new Tree('a'), new Tree('b')))));
    bitset <16> x(t.get_key());
    cout<<"Получившаяся ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<x<<endl<<"Значение в вершине до оптимизации: "<<t.get_value()<<endl;
    t.optimize();
    bitset <16> y(t.get_key());
    cout<<"Оптимизированный ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<y<<endl<<"Значение в вершине после оптимизации: "<<t.get_value()<<endl;
    
    //Тест работы с ДНФ - Тест с тройной инверсией 3
    Tree t('!', new Tree('!', new Tree('!', new Tree('*', new Tree('a'), new Tree('b')))));
    bitset <16> x(t.get_key());
    cout<<"Получившаяся ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<x<<endl<<"Значение в вершине до оптимизации: "<<t.get_value()<<endl;
    t.optimize();
    bitset <16> y(t.get_key());
    cout<<"Оптимизированный ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<y<<endl<<"Значение в вершине после оптимизации: "<<t.get_value()<<endl;
    
    //Тест работы с ДНФ - Тест с тройной инверсией 4
    Tree t('!', new Tree('!', new Tree('!', new Tree('*', new Tree('a'), new Tree('+', new Tree('b'), new Tree('c'))))));
    bitset <16> x(t.get_key());
    cout<<"Получившаяся ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<x<<endl<<"Значение в вершине до оптимизации: "<<t.get_value()<<endl;
    t.optimize();
    bitset <16> y(t.get_key());
    cout<<"Оптимизированный ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<y<<endl<<"Значение в вершине после оптимизации: "<<t.get_value()<<endl;
    
    //Тест работы с ДНФ - Тест с тройной инверсией 5
    Tree t('!', new Tree('!', new Tree('!', new Tree('*', new Tree('a'), new Tree('+', new Tree('b'), new Tree('b'))))));
    bitset <16> x(t.get_key());
    cout<<"Получившаяся ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<x<<endl<<"Значение в вершине до оптимизации: "<<t.get_value()<<endl;
    t.optimize();
    bitset <16> y(t.get_key());
    cout<<"Оптимизированный ДНФ: "<<t.print()<<endl<<"Ключ дерева: "<<t.get_key()<<" : "<<y<<endl<<"Значение в вершине после оптимизации: "<<t.get_value()<<endl;
    
    /*
    //Пример оптимизации дерева
    Tree t = Tree('+', new Tree('a'), new Tree('+', new Tree('b'), new Tree('+', new Tree('c'), new Tree('d'))));
    cout<<"Дерево до оптимизации: "<<t.print()<<endl;
    t.optimize();
    cout<<"Дерево после оптимизации: "<<t.print()<<endl;
    bitset <16> x(t.get_key());
    cout<<"Ключ дерева: "<<t.get_key()<<" или "<<x<<endl;
    */

    /*
    //Пример работы с разными деревьями
    Tree a = Tree('a'); //Дерево a
    Tree b = Tree('b'); //Дерево b
    Tree c = Tree('c'); //Дерево c
    Tree d = Tree('d'); //Дерево d
    Tree n1 = Tree('!', new Tree('a')); //Дерево НЕ(a)
    Tree n2 = Tree('!', new Tree('b')); //Дерево НЕ(b)
    Tree n3 = Tree('!', new Tree('c')); //Дерево НЕ(c)
    Tree n4 = Tree('!', new Tree('d')); //Дерево НЕ(d)
    Tree nn1 = Tree('!', new Tree('!', new Tree('a'))); //Дерево НЕ(НЕ(a))
    Tree nn2 = Tree('!', new Tree('!', new Tree('b'))); //Дерево НЕ(НЕ(b))
    Tree nn3 = Tree('!', new Tree('!', new Tree('c'))); //Дерево НЕ(НЕ(c))
    Tree nn4 = Tree('!', new Tree('!', new Tree('d'))); //Дерево НЕ(НЕ(d))
    Tree qnn1 = Tree('*', new Tree('!', new Tree('a')), new Tree('a')); //Дерево НЕ(a) И a
    Tree qnn2 = Tree('*', new Tree('!', new Tree('b')), new Tree('b')); //Дерево НЕ(b) И b
    Tree qnn3 = Tree('*', new Tree('!', new Tree('c')), new Tree('c')); //Дерево НЕ(c) И c
    Tree qnn4 = Tree('*', new Tree('!', new Tree('d')), new Tree('d')); //Дерево НЕ(d) ИЛИ d
    Tree onn1 = Tree('+', new Tree('!', new Tree('a')), new Tree('a')); //Дерево НЕ(a) ИЛИ a
    Tree onn2 = Tree('+', new Tree('!', new Tree('b')), new Tree('b')); //Дерево НЕ(b) ИЛИ b
    Tree onn3 = Tree('+', new Tree('!', new Tree('c')), new Tree('c')); //Дерево НЕ(c) ИЛИ c
    Tree onn4 = Tree('+', new Tree('!', new Tree('d')), new Tree('d')); //Дерево НЕ(d) ИЛИ d
    
    cout<<"Дерево a: "<<a.print()<<endl<<"Дерево b: "<<b.print()<<endl<<"Дерево c: "<<c.print()<<endl<<"Дерево d: "<<d.print()<<endl;
    cout<<"Дерево НЕ(a): "<<n1.print()<<endl<<"Дерево НЕ(b): "<<n2.print()<<endl<<"Дерево НЕ(c): "<<n3.print()<<endl<<"Дерево НЕ(d): "<<n4.print()<<endl;
    cout<<"Дерево НЕ(НЕ(a)): "<<nn1.print()<<endl<<"Дерево НЕ(НЕ(b)): "<<nn2.print()<<endl<<"Дерево НЕ(НЕ(c)): "<<nn3.print()<<endl<<"Дерево НЕ(НЕ(d)): "<<nn4.print()<<endl;
    cout<<"Дерево НЕ(a) И a: "<<qnn1.print()<<endl<<"Дерево НЕ(b) И b: "<<qnn2.print()<<endl<<"Дерево НЕ(c) И c: "<<qnn3.print()<<endl<<"Дерево НЕ(d) И d: "<<qnn4.print()<<endl;
    cout<<"Дерево НЕ(a) ИЛИ a: "<<onn1.print()<<endl<<"Дерево НЕ(b) ИЛИ b: "<<onn2.print()<<endl<<"Дерево НЕ(c) ИЛИ c: "<<onn3.print()<<endl<<"Дерево НЕ(d) ИЛИ d: "<<onn4.print()<<endl;

    cout<<"Оптимизируем  все деревья"<<endl;
    a.optimize();
    b.optimize();
    c.optimize();
    d.optimize();
    n1.optimize();
    n2.optimize();
    n3.optimize();
    n4.optimize();
    nn1.optimize();
    nn2.optimize();
    nn3.optimize();
    nn4.optimize();
    qnn1.optimize();
    qnn2.optimize();
    qnn3.optimize();
    qnn4.optimize();
    onn1.optimize();
    onn2.optimize();
    onn3.optimize();
    onn4.optimize();
    
    cout<<"Дерево a: "<<a.print()<<endl<<"Дерево b: "<<b.print()<<endl<<"Дерево c: "<<c.print()<<endl<<"Дерево d: "<<d.print()<<endl;
    cout<<"Дерево НЕ(a): "<<n1.print()<<endl<<"Дерево НЕ(b): "<<n2.print()<<endl<<"Дерево НЕ(c): "<<n3.print()<<endl<<"Дерево НЕ(d): "<<n4.print()<<endl;
    cout<<"Дерево НЕ(НЕ(a)): "<<nn1.print()<<endl<<"Дерево НЕ(НЕ(b)): "<<nn2.print()<<endl<<"Дерево НЕ(НЕ(c)): "<<nn3.print()<<endl<<"Дерево НЕ(НЕ(d)): "<<nn4.print()<<endl;
    cout<<"Дерево НЕ(a) И a: "<<qnn1.print()<<endl<<"Дерево НЕ(b) И b: "<<qnn2.print()<<endl<<"Дерево НЕ(c) И c: "<<qnn3.print()<<endl<<"Дерево НЕ(d) И d: "<<qnn4.print()<<endl;
    cout<<"Дерево НЕ(a) ИЛИ a: "<<onn1.print()<<endl<<"Дерево НЕ(b) ИЛИ b: "<<onn2.print()<<endl<<"Дерево НЕ(c) ИЛИ c: "<<onn3.print()<<endl<<"Дерево НЕ(d) ИЛИ d: "<<onn4.print()<<endl;

    cout<<endl<<"Равны ли деревья"<<endl;
    cout<<"Дерево a и Дерево a: "<<(a.get_key() == a.get_key())<<endl;
    cout<<"Дерево a и Дерево НЕ(НЕ(a)): "<<(a.get_key() == nn1.get_key())<<endl;
    cout<<"Дерево b и Дерево НЕ(НЕ(b)): "<<(b.get_key() == nn2.get_key())<<endl;
    cout<<"Дерево c и Дерево НЕ(НЕ(c)): "<<(c.get_key() == nn3.get_key())<<endl;
    cout<<"Дерево d и Дерево НЕ(НЕ(d)): "<<(d.get_key() == nn4.get_key())<<endl;
    cout<<"Дерево a и Дерево НЕ(a) И a: "<<(a.get_key() == qnn1.get_key())<<endl;
    cout<<"Дерево b и Дерево НЕ(b): "<<(b.get_key() == n2.get_key())<<endl;
    cout<<"Дерево c и Дерево d: "<<(c.get_key() == d.get_key())<<endl;
    cout<<"Дерево d и Дерево НЕ(НЕ(a)): "<<(d.get_key() == nn1.get_key())<<endl;
    
    cout<<endl<<"Обратны ли деревья"<<endl;
    cout<<"Дерево a и Дерево НЕ(a): "<<(a.get_key() == get_opposite_key(n1.get_key(), 4))<<endl;
    cout<<"Дерево b и Дерево НЕ(b): "<<(b.get_key() == get_opposite_key(n2.get_key(), 4))<<endl;
    cout<<"Дерево c и Дерево НЕ(c): "<<(c.get_key() == get_opposite_key(n3.get_key(), 4))<<endl;
    cout<<"Дерево d и Дерево НЕ(d): "<<(d.get_key() == get_opposite_key(n4.get_key(), 4))<<endl;
    cout<<"Дерево a и Дерево НЕ(НЕ(a)): "<<(a.get_key() == get_opposite_key(nn1.get_key(), 4))<<endl;
    cout<<"Дерево b и Дерево НЕ(НЕ(b)): "<<(b.get_key() == get_opposite_key(nn2.get_key(), 4))<<endl;
    cout<<"Дерево c и Дерево НЕ(НЕ(c)): "<<(c.get_key() == get_opposite_key(nn3.get_key(), 4))<<endl;
    cout<<"Дерево d и Дерево НЕ(НЕ(d)): "<<(d.get_key() == get_opposite_key(nn4.get_key(), 4))<<endl;
    cout<<"Дерево a и Дерево НЕ(a) И a: "<<(a.get_key() == get_opposite_key(qnn1.get_key(), 4))<<endl;
    cout<<"Дерево b и Дерево b: "<<(b.get_key() == get_opposite_key(b.get_key(), 4))<<endl;
    cout<<"Дерево c и Дерево d: "<<(c.get_key() == get_opposite_key(d.get_key(), 4))<<endl;
    cout<<"Дерево d и Дерево НЕ(НЕ(a)): "<<(d.get_key() == get_opposite_key(nn1.get_key(), 4))<<endl;
    */
*/